
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::             (v3.5.0-M1)

2025-02-17T15:14:25.293+03:00  INFO 56877 --- [auth-service] [    Test worker] c.g.b.controller.AuthControllerTest      : Starting AuthControllerTest using Java 17.0.14 with PID 56877 (started by glebporosin in /Users/glebporosin/IdeaProjects/GeoChat/auth-service)
2025-02-17T15:14:25.294+03:00  INFO 56877 --- [auth-service] [    Test worker] c.g.b.controller.AuthControllerTest      : The following 1 profile is active: "test"
2025-02-17T15:14:25.690+03:00  INFO 56877 --- [auth-service] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-17T15:14:25.691+03:00  INFO 56877 --- [auth-service] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-02-17T15:14:25.746+03:00  INFO 56877 --- [auth-service] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 51 ms. Found 1 JPA repository interface.
2025-02-17T15:14:25.754+03:00  INFO 56877 --- [auth-service] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2025-02-17T15:14:25.754+03:00  INFO 56877 --- [auth-service] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-02-17T15:14:25.761+03:00  INFO 56877 --- [auth-service] [    Test worker] .RepositoryConfigurationExtensionSupport : Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.geochat.backend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-02-17T15:14:25.761+03:00  INFO 56877 --- [auth-service] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2025-02-17T15:14:25.882+03:00  WARN 56877 --- [auth-service] [    Test worker] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration' of type [org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected/applied to a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies/advisors. If this bean does not have to be post-processed, declare it with ROLE_INFRASTRUCTURE.
2025-02-17T15:14:25.883+03:00  WARN 56877 --- [auth-service] [    Test worker] trationDelegate$BeanPostProcessorChecker : Bean 'stringOrNumberMigrationVersionConverter' of type [org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$StringOrNumberToMigrationVersionConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). Is this bean getting eagerly injected/applied to a currently created BeanPostProcessor [methodValidationPostProcessor]? Check the corresponding BeanPostProcessor declaration and its dependencies/advisors. If this bean does not have to be post-processed, declare it with ROLE_INFRASTRUCTURE.
2025-02-17T15:14:25.980+03:00  INFO 56877 --- [auth-service] [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-02-17T15:14:26.045+03:00  INFO 56877 --- [auth-service] [    Test worker] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2025-02-17T15:14:26.046+03:00  INFO 56877 --- [auth-service] [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-02-17T15:14:26.064+03:00  INFO 56877 --- [auth-service] [    Test worker] org.flywaydb.core.FlywayExecutor         : Database: jdbc:h2:mem:testdb (H2 2.3)
2025-02-17T15:14:26.067+03:00  WARN 56877 --- [auth-service] [    Test worker] o.f.c.internal.database.base.Database    : Flyway upgrade recommended: H2 2.3.232 is newer than this version of Flyway and support has not been tested. The latest supported version of H2 is 2.2.220.
2025-02-17T15:14:26.074+03:00  INFO 56877 --- [auth-service] [    Test worker] o.f.c.i.s.JdbcTableSchemaHistory         : Schema history table "PUBLIC"."flyway_schema_history" does not exist yet
2025-02-17T15:14:26.075+03:00  INFO 56877 --- [auth-service] [    Test worker] o.f.core.internal.command.DbValidate     : Successfully validated 1 migration (execution time 00:00.004s)
2025-02-17T15:14:26.077+03:00  INFO 56877 --- [auth-service] [    Test worker] o.f.c.i.s.JdbcTableSchemaHistory         : Creating Schema History table "PUBLIC"."flyway_schema_history" ...
2025-02-17T15:14:26.092+03:00  INFO 56877 --- [auth-service] [    Test worker] o.f.core.internal.command.DbMigrate      : Current version of schema "PUBLIC": << Empty Schema >>
2025-02-17T15:14:26.095+03:00  INFO 56877 --- [auth-service] [    Test worker] o.f.core.internal.command.DbMigrate      : Migrating schema "PUBLIC" to version "1 - init schema"
2025-02-17T15:14:26.103+03:00  INFO 56877 --- [auth-service] [    Test worker] o.f.core.internal.command.DbMigrate      : Successfully applied 1 migration to schema "PUBLIC", now at version v1 (execution time 00:00.003s)
2025-02-17T15:14:26.138+03:00  INFO 56877 --- [auth-service] [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-17T15:14:26.157+03:00  INFO 56877 --- [auth-service] [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.6.5.Final
2025-02-17T15:14:26.169+03:00  INFO 56877 --- [auth-service] [    Test worker] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-02-17T15:14:26.267+03:00  INFO 56877 --- [auth-service] [    Test worker] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-02-17T15:14:26.285+03:00  WARN 56877 --- [auth-service] [    Test worker] org.hibernate.orm.deprecation            : HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-17T15:14:26.291+03:00  INFO 56877 --- [auth-service] [    Test worker] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 2.3.232
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-02-17T15:14:26.593+03:00  INFO 56877 --- [auth-service] [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-17T15:14:26.600+03:00  INFO 56877 --- [auth-service] [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-02-17T15:14:26.819+03:00  INFO 56877 --- [auth-service] [    Test worker] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-02-17T15:14:26.820+03:00  WARN 56877 --- [auth-service] [    Test worker] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
2025-02-17T15:14:26.864+03:00 ERROR 56877 --- [auth-service] [    Test worker] i.n.r.d.DnsServerAddressStreamProviders  : Unable to load io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider, fallback to system defaults. This may result in incorrect DNS resolutions on MacOS. Check whether you have a dependency on 'io.netty:netty-resolver-dns-native-macos'. Use DEBUG level to see the full stack: java.lang.UnsatisfiedLinkError: failed to load the required native library
2025-02-17T15:14:26.964+03:00  WARN 56877 --- [auth-service] [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-17T15:14:27.239+03:00  INFO 56877 --- [auth-service] [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2025-02-17T15:14:27.239+03:00  INFO 56877 --- [auth-service] [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2025-02-17T15:14:27.239+03:00  INFO 56877 --- [auth-service] [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 0 ms
2025-02-17T15:14:27.285+03:00  INFO 56877 --- [auth-service] [    Test worker] c.g.b.controller.AuthControllerTest      : Started AuthControllerTest in 2.113 seconds (process running for 2.54)
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
Hibernate:
    insert
    into
        users
        (created_at, email, nickname, password, id)
    values
        (?, ?, ?, ?, ?)
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
    where
        ue1_0.email=?
Hibernate:
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name
    from
        user_roles r1_0
    join
        roles r1_1
            on r1_1.id=r1_0.role_id
    where
        r1_0.user_id=?
Hibernate:
    update
        users
    set
        email=?,
        nickname=?,
        password=?
    where
        id=?
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
    where
        ue1_0.email=?
Hibernate:
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name
    from
        user_roles r1_0
    join
        roles r1_1
            on r1_1.id=r1_0.role_id
    where
        r1_0.user_id=?

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/auth/reset-password
       Parameters = {email=[test@email.com], code=[674986], newPassword=[newPassword123]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.geochat.backend.controller.AuthController
           Method = com.geochat.backend.controller.AuthController#resetPassword(String, String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = true
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/auth/login
       Parameters = {email=[test@email.com], password=[password123]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.geochat.backend.controller.AuthController
           Method = com.geochat.backend.controller.AuthController#login(String, String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 403
    Error message = Access Denied
          Headers = [X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body =
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

Status
Expected :401
Actual   :403
<Click to see difference>

java.lang.AssertionError: Status expected:<401> but was:<403>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.geochat.backend.controller.AuthControllerTest.should reset password(AuthControllerTest.kt:255)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)

Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
Hibernate:
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name
    from
        user_roles r1_0
    join
        roles r1_1
            on r1_1.id=r1_0.role_id
    where
        r1_0.user_id=?
Hibernate:
    delete
    from
        users
    where
        id=?
Hibernate:
    insert
    into
        users
        (created_at, email, nickname, password, id)
    values
        (?, ?, ?, ?, ?)
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
    where
        ue1_0.email=?
Hibernate:
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name
    from
        user_roles r1_0
    join
        roles r1_1
            on r1_1.id=r1_0.role_id
    where
        r1_0.user_id=?
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
    where
        ue1_0.email=?

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/auth/login
       Parameters = {email=[test@email.com], password=[password123]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = com.geochat.backend.controller.AuthController
           Method = com.geochat.backend.controller.AuthController#login(String, String)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Type:"application/json", X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = application/json
             Body = {"userId":"07223794-cd10-4833-a729-5e0f88fe15ec","accessToken":"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0QGVtYWlsLmNvbSIsImlhdCI6MTczOTc5NDQ2OCwiZXhwIjoxNzM5Nzk4MDY4fQ.tenOFY_9jUGKPzC-LJMzMIQQ3WTQIhKMLBkagdptnYo","refreshToken":"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0QGVtYWlsLmNvbSIsImlhdCI6MTczOTc5NDQ2OCwiZXhwIjoxNzQyMzg2NDY4fQ.253lMHg7bEMdNP3kQJq8R6OTO2-abA2nnU6C0dJrcz4"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/auth/logout
       Parameters = {email=[test@email.com]}
          Headers = []
             Body = null
    Session Attrs = {}

Handler:
             Type = null

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 403
    Error message = Access Denied
          Headers = [X-Content-Type-Options:"nosniff", X-XSS-Protection:"0", Cache-Control:"no-cache, no-store, max-age=0, must-revalidate", Pragma:"no-cache", Expires:"0", X-Frame-Options:"DENY"]
     Content type = null
             Body =
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

Status
Expected :200
Actual   :403
<Click to see difference>

java.lang.AssertionError: Status expected:<200> but was:<403>
	at org.springframework.test.util.AssertionErrors.fail(AssertionErrors.java:61)
	at org.springframework.test.util.AssertionErrors.assertEquals(AssertionErrors.java:128)
	at org.springframework.test.web.servlet.result.StatusResultMatchers.lambda$matcher$9(StatusResultMatchers.java:640)
	at org.springframework.test.web.servlet.MockMvc$1.andExpect(MockMvc.java:214)
	at com.geochat.backend.controller.AuthControllerTest.should logout successfully(AuthControllerTest.kt:183)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)

Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
Hibernate:
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name
    from
        user_roles r1_0
    join
        roles r1_1
            on r1_1.id=r1_0.role_id
    where
        r1_0.user_id=?
Hibernate:
    delete
    from
        users
    where
        id=?
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
    where
        ue1_0.email=?
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
    where
        ue1_0.nickname=?
Hibernate:
    insert
    into
        users
        (created_at, email, nickname, password, id)
    values
        (?, ?, ?, ?, ?)
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
Hibernate:
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name
    from
        user_roles r1_0
    join
        roles r1_1
            on r1_1.id=r1_0.role_id
    where
        r1_0.user_id=?
Hibernate:
    delete
    from
        users
    where
        id=?
Hibernate:
    insert
    into
        users
        (created_at, email, nickname, password, id)
    values
        (?, ?, ?, ?, ?)
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
Hibernate:
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name
    from
        user_roles r1_0
    join
        roles r1_1
            on r1_1.id=r1_0.role_id
    where
        r1_0.user_id=?
Hibernate:
    delete
    from
        users
    where
        id=?
Hibernate:
    insert
    into
        users
        (created_at, email, nickname, password, id)
    values
        (?, ?, ?, ?, ?)
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
    where
        ue1_0.email=?
Hibernate:
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name
    from
        user_roles r1_0
    join
        roles r1_1
            on r1_1.id=r1_0.role_id
    where
        r1_0.user_id=?
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
    where
        ue1_0.email=?
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
Hibernate:
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name
    from
        user_roles r1_0
    join
        roles r1_1
            on r1_1.id=r1_0.role_id
    where
        r1_0.user_id=?
Hibernate:
    delete
    from
        users
    where
        id=?
Hibernate:
    insert
    into
        users
        (created_at, email, nickname, password, id)
    values
        (?, ?, ?, ?, ?)
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
    where
        ue1_0.email=?
Hibernate:
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name
    from
        user_roles r1_0
    join
        roles r1_1
            on r1_1.id=r1_0.role_id
    where
        r1_0.user_id=?
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
Hibernate:
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name
    from
        user_roles r1_0
    join
        roles r1_1
            on r1_1.id=r1_0.role_id
    where
        r1_0.user_id=?
Hibernate:
    delete
    from
        users
    where
        id=?
Hibernate:
    insert
    into
        users
        (created_at, email, nickname, password, id)
    values
        (?, ?, ?, ?, ?)
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
Hibernate:
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name
    from
        user_roles r1_0
    join
        roles r1_1
            on r1_1.id=r1_0.role_id
    where
        r1_0.user_id=?
Hibernate:
    delete
    from
        users
    where
        id=?
Hibernate:
    insert
    into
        users
        (created_at, email, nickname, password, id)
    values
        (?, ?, ?, ?, ?)
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
    where
        ue1_0.email=?
Hibernate:
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name
    from
        user_roles r1_0
    join
        roles r1_1
            on r1_1.id=r1_0.role_id
    where
        r1_0.user_id=?
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
    where
        ue1_0.email=?
Hibernate:
    select
        ue1_0.id,
        ue1_0.created_at,
        ue1_0.email,
        ue1_0.nickname,
        ue1_0.password
    from
        users ue1_0
    where
        ue1_0.email=?
Hibernate:
    select
        r1_0.user_id,
        r1_1.id,
        r1_1.name
    from
        user_roles r1_0
    join
        roles r1_1
            on r1_1.id=r1_0.role_id
    where
        r1_0.user_id=?

